#Utility: Connect to kubernetes cluster:
gcloud container clusters get-credentials cluster-test --zone us-central1-c --project methodical-path-285010

#Pod: Get All pods in kube-system namespace: 
kubectl get pods --namespace=kube-system

#Namespace: Define namespace YAML:
kubectl create -f namespace-dev.yml

#Pod: Define pod YAML
kubectl create -f pod-definition.yml
#Switch Namespace to Dev:
kubectl config set-context $(kubectl config current-context)  --namespace=dev

#Quota: Set Quota:
kubectl create -f compte-quota.yaml

#Pod: create a pod from image
kubectl run nginx --image nginx
##Lecture 12
#Create a pod
kubectl create -f /home/agrawal_ved/kubernetes/dev/cluster1/pods/pod-definition.yml


#Pod: Display all pods: kubectl get pods
kubectl get pods


#Pod: Details about a pod : kubectl describe pod myapp-pod
kubectl describe pod myapp-pod


# Get commands with basic output
kubectl get services                          # List all services in the namespace
kubectl get pods --all-namespaces             # List all pods in all namespaces
kubectl get pods -o wide                      # List all pods in the current namespace, with more details
kubectl get deployment my-dep                 # List a particular deployment
kubectl get pods                              # List all pods in the namespace
kubectl get pod my-pod -o yaml                # Get a pod's YAML

# Describe commands with verbose output
kubectl describe nodes my-node
kubectl describe pods my-pod

#Pod: Command to delete pod
kubectl delete pods webapp

#Utility: Create yml by dry-run command option
kubectl run redis --image=redis --dry-run=client -o yaml > pod-def_dry-run.yml

#Utility: extract the definition to a file using the below command:
kubectl get pod <pod-name> -o yaml > pod-definition.yaml

#Replicasets: Command to create
kubectl create -f dev/cluster1/replicatesets/replicaset-definition.yml

#Replicasets: Command to get replicasets in wide format
kubectl get replicasets -o wide

#Replicasets: Command to describe  
kubectl describe replicasets  myapp-replicaset

#Replicasets: Command to delete  -- also deletes underlying PODs
kubectl delete replicasets  myapp-replicaset

#Replicasets: Command to scale - first update YAML and then run below  
kubectl replace -f  dev/cluster1/replicatesets/replicaset-definition.yml

#Replicasets: Command to scale - with type name parameter  
kubectl scale --replicas=6 replicaset myapp-replicaset

#Replicasets: Command to scale - with reference of yaml
kubectl scale --replicas=6 -f dev/cluster1/replicatesets/replicaset-definition.yml

#Deployment: Command to create using apply
kubectl apply -f  deployment-definition.yml

#Deployment: Command to directly create deployment specifying image
kubectl create deployment <deployment name> --image=<image-name> --replicas=<replica number> 

#Formatting Output with kubectl
#kubectl [command] [TYPE] [NAME] -o <output_format>
#-o json Output a JSON formatted API object.
#-o name Print only the resource name and nothing else.
#-o wide Output in the plain-text format with any additional information.
#-o yaml Output a YAML formatted API object.


#Namespace: get objects in a namespace
kubectl get all --namespace=kube-system
kubectl get -n kube-system pods

#Namespace: Get namespace shortcut ns with no-headers
kubectl get ns --no-headers

#Namespace: create pod in a defined namespace
kubectl create -f pod-definition.yml --namespace=dev
kubectl run redis --image=redis -n dev

#Namespace: create namespace
kubectl create namespace dev

#Namespace: switch to namespace
kubectl config set-context $(kubectl config current-context) --namespace=dev

#Namespace: View pods in all namespaces
kubectl get pods --all-namespace

#32. --dry-run=client option: This will not create the resource, instead, tell you whether the resource can be created and if your command is right.
#    -o yaml: This will output the resource definition in YAML format on the screen.

#Pod: command to create pod with label and image options, check with dry-run and generate yaml
kubectl run redis --image=redi:alpine -l tier=db --dry-run=client -o yaml


#Create a deployment named webapp using the image kodekloud/webapp-color with 3 replicas
kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3 --dry-run=client -o yaml

#Create a new pod called custom-nginx using the nginx image and expose it on container port 8080
kubectl run custom-nginx --image=nginx --port=8080


#ConfigMaps: Imperative : Create : Syntax
kubectl create configmap <config-name> --from-literal=<key>=<value>

#ConfigMaps: Imperative : Create : example
kubectl create configmap app-config --from-literal=APP_COLOR=blue

#ConfigMaps: Imperative : Create from file : Syntax
kubectl create configmap <config-name> --from-file=<path-to-file>

#ConfigMaps: Imperative : Create from file : Example
kubectl create configmap app-config --from-file=app-config.properties



#ConfigMaps: Declarative : Create : Example
#cat > config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config-prod
data:
  APP_COLOR: blue
  APP_MODE: prod

kubectl create -f config-map.yaml

#ConfigMaps: Get list of configmaps
kubectl get cm -o wide
kubectl get configmaps

#ConfigMaps: Describe configmap - app-config-prod
kubectl describe configmaps app-config-prod



#Utility: Command to get information of usage of any object	  
kubectl explain pods --recursive | grep envFrom

#Create a service redis-service to expose the redis application within the cluster on port 6379
kubectl expose pod redis --port=6379 --name redis-service


#Secrets: Imperative : Create : Syntax
kubectl create secret generic <secret-name> --from-literal=<key>=<value>

#Secrets: Imperative : Create : example
kubectl create secret generic app-secret--from-literal=DB_Host=mysql

#Secrets: Imperative : Create from file : Syntax
kubectl create secret generic <secret-name> --from-file=<path-to-file>

#Secrets: Imperative : Create from file : Example
kubectl create secret generic app-secret--from-file=app-secret.properties

#Utility: Command to convert plain text to encoded format
echo -n 'mysql' | base64

#Utility: Command to convert encoded to plain text
echo -n 'bXlzcWw=' | base64 --decode

#Secrets: Declarative : Create : Example
#mkdir -p /home/agrawal_ved/kubernetes/dev/cluster1/secret
#cat > /home/agrawal_ved/kubernetes/dev/cluster1/secret/secret-data.yaml
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
data:
  DB_Host: bXlzcWw=
  DB_User: cm9vdA==
  DB_password: cGFzd3Jk

kubectl create -f /home/agrawal_ved/kubernetes/dev/cluster1/secret/secret-data.yaml

#Secrets: Get list of Secrets
kubectl get secrets -o wide
kubectl get secrets

#Secrets: Describe secrets - app-secret
kubectl describe secrets app-secret


#ENV: update PATH to use etcd etcdctl
export PATH=$PATH:/tmp/etcd-download-test/


#ETCD: start a local etcd server
/tmp/etcd-download-test/etcd

#ETCD:  write,read to etcd
/tmp/etcd-download-test/etcdctl --endpoints=localhost:2379 put foo bar
/tmp/etcd-download-test/etcdctl --endpoints=localhost:2379 get foo

#Install: Install locate package for Linux
sudo apt-get install mlocate

##Install: Update locate database
sudo updatedb

#ETCD: Check version of etcd and etcdctl
/tmp/etcd-download-test/etcd --version
/tmp/etcd-download-test/etcdctl version

